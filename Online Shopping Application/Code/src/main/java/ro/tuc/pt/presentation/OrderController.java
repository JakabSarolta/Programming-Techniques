package ro.tuc.pt.presentation;

import ro.tuc.pt.business_logic.OrderBLL;
import ro.tuc.pt.utils.TableFactory;

import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
/**
 *
 * The OrderController class implements ActionListener interface and its method actionPerformed is called
 * every time the user selects any of the operations insert, delete or update.
 * This class calls the OrderBLL class to perform the queries.
 */
public class OrderController implements ActionListener {
    private final OrderView orderView;
    private final OrderBLL orderBLL = new OrderBLL();
    public OrderController(OrderView orderView) {
        this.orderView = orderView;
        updateTable();
    }

    /**
     * The actionPerformed overridden method calls the add, delete and update methods to execute the
     * queries on the tables of the database when the corresponding buttons have been pushed by the user.
     * @param e the action generated by the pressing of a button
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        String command = e.getActionCommand();
        if(command.equals("add")){
           orderBLL.add(orderView.getOrderText(), orderView.getClientText(), orderView.getProductText(), orderView.getAmountText());
        } else if(command.equals("delete")){
            orderBLL.delete(orderView.getOrderText());
        } else if(command.equals("update")){
            orderBLL.update(orderView.getOrderText(), orderView.getClientText(), orderView.getProductText(), orderView.getAmountText());
        }
        updateTable();
    }

    /**
     * After every query executed, the updateTable method regenerates the table for the gui to be updated
     */
    public void updateTable(){
        DefaultTableModel model = TableFactory.createTable(orderBLL.findALl());
        orderView.table.setModel(model);
    }
}
